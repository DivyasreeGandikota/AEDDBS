/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SupplierRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.QualityCheckEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.QualityOrganization;
import Business.Organization.SupplierOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FoodRequirementRequest;
import Business.WorkQueue.Inventory;
import Business.WorkQueue.InventoryDirectory;
import Business.WorkQueue.Products;
import Business.WorkQueue.WorkRequest;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sai Sravani
 */
public class SupplierWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SupplierWorkAreaJPanel
     */
     private JPanel userProcessContainer;
    private FoodRequirementRequest request;
    private ArrayList<Inventory> inventoryList;
    private ArrayList<Products> productList;
    private ArrayList<Products> reqProductList;
    UserAccount userAccount;
    private Organization organization;
    EcoSystem ecosystem;

    Enterprise enterprise;

    public SupplierWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, SupplierOrganization supplierOrganization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        // productList = request.getProductList();
        this.enterprise = enterprise;
        this.organization = supplierOrganization;
        this.userAccount = account;
        this.ecosystem = business;
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();

            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnProductsList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        btnApprove = new javax.swing.JButton();
        enterpriseLabel1 = new javax.swing.JLabel();
        refreshJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnProductsList.setBackground(new java.awt.Color(255, 255, 255));
        btnProductsList.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        btnProductsList.setText("View Product Request");
        btnProductsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductsListActionPerformed(evt);
            }
        });
        add(btnProductsList, new org.netbeans.lib.awtextra.AbsoluteConstraints(428, 280, 195, 38));

        workRequestJTable.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 82, 611, 171));

        assignJButton.setBackground(new java.awt.Color(255, 255, 255));
        assignJButton.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 280, 226, 38));

        btnApprove.setBackground(new java.awt.Color(255, 255, 255));
        btnApprove.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });
        add(btnApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 160, 38));

        enterpriseLabel1.setFont(new java.awt.Font("Bodoni MT", 1, 24)); // NOI18N
        enterpriseLabel1.setForeground(new java.awt.Color(255, 255, 255));
        enterpriseLabel1.setText("Supplier Dashboard");
        add(enterpriseLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 28, 269, 30));

        refreshJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshJButton.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(511, 29, 112, 35));
    }// </editor-fold>//GEN-END:initComponents

    private void btnProductsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductsListActionPerformed

    }//GEN-LAST:event_btnProductsListActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == null) {
            request.setReceiver(userAccount);
        }
        populateTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        int count = 0, oldCount = 0, newCount = 0;
        if (selectedRow < 0) {
            return;
        }
        FoodRequirementRequest request = (FoodRequirementRequest) workRequestJTable.getValueAt(selectedRow, 0);

        if (request.getReceiver() == userAccount) {

            request.setReceiver(null);

            System.out.println(request.getSuppProductList() + "Suppliser List");

            //            for (Inventory inSupp : InventoryDirectory.getInventoryList()) {
                //                for (Products prod : request.getSuppProductList()) {
                    //                    if (prod.getProductName().equalsIgnoreCase(inSupp.getProductName())) {
                        //                        count = prod.getQuantity();
                        //                        oldCount = inSupp.getQuantity();
                        //                        newCount = count + oldCount;
                        //                        inSupp.setQuantity(newCount);
                        //                        System.out.println(prod.getProductName());
                        //                        System.out.println(oldCount + "oldCount");
                        //                        System.out.println(newCount + "newCount");
                        ////                        suppCount=inSupp.getQuantity();
                        ////                        reqCount=prod.getQuantity();
                        ////                        suppCount=-reqCount;
                        ////                        inSupp.setQuantity(suppCount);
                        //
                        //                    }
                    //                }
                //            }
            System.out.println("=---------2nd for Prod Name");
            int reqCount = 0, suppCount = 0, changeCount = 0;
            for (Inventory inSupp : InventoryDirectory.getInventoryList()) {
                for (Products prod : request.getProductList()) {

                    System.out.println(prod.getProductName() + "Prod Name");
                    if (prod.getProductName().equalsIgnoreCase(inSupp.getProductName())) {
                        if (prod.getQuantity() < inSupp.getQuantity()) {
                            System.out.println("CHECK COUNT"+ prod.getProductName());
                            suppCount = inSupp.getQuantity();
                            reqCount = prod.getQuantity();
                            changeCount = suppCount - reqCount;
                            inSupp.setQuantity(changeCount);
                            System.out.println("CHECK COUNT"+ changeCount);
                            //                        suppCount=inSupp.getQuantity();
                            //                        reqCount=prod.getQuantity();
                            //                        suppCount=-reqCount;
                            //                        inSupp.setQuantity(suppCount);
                        }
                        else
                        {
                            System.out.println("CHECK BIGEER "+ prod.getProductName()+"  "+ prod.getQuantity());
                            inSupp.setQuantity(0);
                            System.out.println("CHECK BIGEER "+ inSupp.getProductName()+"  "+ inSupp.getQuantity());
                        }
                    }
                }
            }
            //****************************************changed
            //resultJTextField.setText();
            //   request.setRequestResult("Approved");
            request.setStatus("Sent to Quality");
            if (request.getReceiver() == userAccount) {
                this.request.setReceiver(null);

            }
            //****************************************changed

            //InventoryDirectory.setInventoryList(inventoryList);
            for (Network n : ecosystem.getNetworkList()) {

                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {

                    //   e.setEnterpriseType(Enterprise.EnterpriseType.QualityCheck);
                    //if(e.getEnterpriseType().getValue().equals("Quality Check"))
                    if (e instanceof QualityCheckEnterprise) {

                        Organization org = null;
                        for (Organization organization : e.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof QualityOrganization) { //changed from shlter to ngo organization
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {

                            org.getWorkQueue().getWorkRequestList().add(request);
                            userAccount.getWorkQueue().getWorkRequestList().add(request);
                        }
                    }
                }
            }
            JOptionPane.showMessageDialog(null, "Request Successfully Approved!!");
        } else {
            JOptionPane.showMessageDialog(null, "Request Assign FIRST!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
        JOptionPane.showMessageDialog(null, "Requests Updated!");
    }//GEN-LAST:event_refreshJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnProductsList;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
